## Copyright 2021 Matthew Graham

func <map A B>:[A] :: items:[B] f:(A :: B) ->
    _map([], items, f)
--

func <_map C D>:[C] :: result:[C] input:[D] f:(C :: D) ->
    match input
    |[] -> reverse(result)
    |h;t -> _map(f(h);result, t, f)
    --
--

func <reduce A B>:A :: init:A items:[B] f:(A :: A B) ->
    match items
    |[] -> init
    |head;tail ->
        let new_val := f(init, head)
        reduce(new_val, tail, f)
    --
--

func <len T>:Int :: items:[T] ->
    reduce(0, items, fn :: sum _ -> sum + 1 --)
--

func <filter H>:H :: items:[H] f:(Bool :: H) ->
    _filter([], items, f)
--

func <reverse E>:[E] :: items:[E] ->
    _reverse([], items)
--

func <sort T>:[T] :: items:[T] -RUST-

func <cat T>:[T] :: a:[T] b:[T] -RUST-

func <head T>:T :: l:[T]
|h;_ -> h
|_ -> fail(#param_error, "cannot take head from empty list")
--

func <_filter T>:[T] :: acc:[T] input:[T] pred:(Bool :: T)
|(acc, [], _) -> reverse(acc)
|(acc, h;t, f) ->
    let matcher := f(h)
    let new_acc :=
        match f(h)
        |True -> h;acc
        |False -> acc
        --
    _filter(new_acc, t, f)
--

func <_reverse T>:[T] :: out:[T] input:[T]
|(out, []) -> out
|(out, h;t) -> _reverse(h;out, t)
--
