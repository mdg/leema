
type Bool --
type Int --
type Str --
type # --

macro boolean_and and_a and_b >>
    if
    |and_a >> and_b
    |else >> False
    --
--

macro boolean_or or_a or_b >>
    if
    |or_a >> True
    |else >> or_b
    --
--

macro fail ft msg >>
    return create_failure(ft, msg)
--

macro refail f >>
    return f
--

## recover from a failure w/ a new valid value
macro unfail new_val >>
    new_val
--


func bool_not v:Bool / Bool >> __RUST__ --

func int_add a:Int b:Int / Int >> __RUST__ --
func int_sub a:Int b:Int / Int >> __RUST__ --
func int_mult a:Int b:Int / Int >> __RUST__ --
func int_div a:Int b:Int / Int >> __RUST__ --
func int_mod a:Int b:Int / Int >> __RUST__ --
func int_negate a:Int / Int >> __RUST__ --
func int_equal a:Int b:Int / Bool >> __RUST__ --
func int_less_than a:Int b:Int / Bool >> __RUST__ --
func equal[:T] a:T b:T / Bool >> __RUST__ --
func less_than[:T] a:T b:T / Bool >> __RUST__ --
func sleep d:Int >> __RUST__ --
func sleep_forever >> __RUST__ --

func create_failure failure_tag:# msg:Str / Failure >> __RUST__ --
