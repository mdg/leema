import option

datatype T[K V] --

## create a new map
func new[K V] /T[K V] >> __RUST__ --

## set a key/value in the map
func set[K V] m:T[K V] k:K v:V /T[K, V] >> __RUST__ --

## get the value in a map for a given key
func get[K V] m:T[K V] k:K /option::T[V] >> __RUST__ --

## check if the given key is in the map
func has_key[K V] m:T[K V] k:K /Bool >> __RUST__ --

## get the number of items in a map
func len[K V] m:T[K V] /Int >> __RUST__ --



datatype Map`K`V --

## create a new map
func new`K`V:Map'K'V -RUST-

## set a key/value in the map
func set`K`V:Map`K`V :: m:Map`K`V k:K v:V -RUST-

## get the value in a map for a given key
func get'K'V:Map`K`V :: m:Map'K'V k:K -RUST-

## check if the given key is in the map
func has_key'K'V:Bool :: m:T[K V] k:K -RUST-

## get the number of items in a map
func len'K'V:Int :: m:T[K V] -RUST-



datatype Map`K`V --

typefunc M:Map'K'V ->

    ## create a new map
    func new:M -RUST-

    ## set a key/value in the map
    func set:M :: m:M k:K v:V -RUST-
datatype Foo --
    ## get the value in a map for a given key
    func get:V :: m:M k:K -RUST-

    ## check if the given key is in the map
    func has_key:Bool :: m:M k:K -RUST-

    ## get the number of items in a map
    func len:Int :: m:M -RUST-

--
