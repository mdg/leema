
struct Key(Int)

struct Future[T] --

struct Stream[T] --


macro detach(x)
>>
    task::start(fn() x)
--

macro fork(x)
>>
    task::start_fork(fn() x)
--

macro stream(x)
>>
    task::start_stream(fn() x)
--


func start: Key
.action: F(): Void
-RUST-

func start_fork[T]: T%
.action: F(): T
-RUST-

func join_fork[T]: T
.forked: T%
-RUST-

func start_stream[T]: T*
.action: F(): T*
-RUST-

func recv_stream[T]: T
.stream: T*
-RUST-

#>>
func map[T, U]: [U]
.items: [T]
.f: F(T): U
>>
    let ifunc := fn(i) >> start_fork(fn() f(i)) --
    let futs := list::map(items, ifunc)
    list::map(futs, fn(fut) join_fork(fut))
#--
