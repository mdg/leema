## Copyright 2021 Matthew Graham

## A date and a time with a timezone
## The primary data type for this module.
struct T
.year: Int
.month: Int
.day: Int
.hour: Int
.minute: Int
.second: Int
.nano: Int
.tz: Zone
--

## A date structure with no concept of time
struct Date
.year: Int
.month: Int
.day: Int
--

## A time of day struct with the timezone
struct TimeOfDay
.hour: Int
.minute: Int
.second: Int
.nano: Int
.tz: Timezone
--

## A datetime struct without timezone
struct NaiveDateTime
.year: Int
.month: Int
.day: Int
.hour: Int
.minute: Int
.second: Int
.nano: Int
--

## A time of day struct without timezone
struct NaiveTimeOfDay
.hour: Int
.minute: Int
.second: Int
.nano: Int
--


#>> The current time, right now
### something here too
### What's the good way to make this work in tests?
#--
func now(): T -RUST-

## Make a new time object from the given unix time
func from_unix(unix_time: Int): T -RUST-

## Format a datetime for the given string
func format(fmt: Str, dt: T): Str -RUST-

## The current date
func today(): Date
>>
    let n := now()
    Date(n.year, n.month, n.day)
--

## Format date for the given string
func format_date(fmt: Str, dt: T): Str -RUST-

## Make a new date object from the given unix time
func date_from_unix(unix_time: Int): Date
>>
    let dt := from_unix(unix_time)
    Date(dt.year, dt.month, dt.day)
--

## Add a timezone to a naive time
func naive_from_unix(unix_time: Int): NaiveDateTime
>>
    let t := from_unix(unix_time)
    NaiveDateTime(
        t.year,
        t.month,
        t.day,
        t.hour,
        t.minute,
        t.second,
        t.nano,
    )
--

## Add a timezone
func naive_with_tz(t: NaiveDateTime, tz: Timezone): T
>>
    T(
        t.year,
        t.month,
        t.day,
        t.hour,
        t.minute,
        t.second,
        t.nano,
        tz,
    )
--
