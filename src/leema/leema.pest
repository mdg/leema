
alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }

block_arrow = { "->" | ">>" }

float = @{ digit+ ~ "." ~ digit+ }
int = @{ digit+ }
number = _{ float | int }
invalid_bool = { "true" | "false" }

kw_let = { "let" }
assign = { ":=" }
dot = { "." }

// postfix_op = {  }

dash = { "-" }
plus = { "+" }
slash = { "/" }
star = { "*" }
modulo = { "mod" }
and = { "and" }
or = { "or" }
xor = { "xor" }
infix_op = _{ plus | dash | star | slash | modulo | dot | and | or | xor }

not = { "not" }
prefix_op = _{ dash | not }

WHITESPACE = _{ " " }

rust_block = { "-RUST-" }

id = @{ LETTER ~ ( LETTER | NUMBER )+ }

dollar_id = { "$" ~ id }

hashtag = { "#" ~ id }

id_or_2 = { (id ~ "." ~ id) | id }

id_generic = { id_or_2 ~ ("'" ~ type_term)* }

id_colon_typex = { id ~ ":" ~ typex }

type_term = { id_generic | "(" ~ typex ~ ")" | "#" }

typex = { type_term | ("[" ~ typex ~ "]") }

term = _{ id_generic | number }

id_colon_expr = { id ~ ":" ~ expr }

expr_struple_items = { (id_colon_expr ~ ","?)* }

expr_call = @{ term ~ "(" ~ expr_struple_items ~ ")" }

prefix_expr = { prefix_op ~ expr }

infix_expr = { term ~ (infix_op ~ expr)+ }

expr =
_{ term
| expr_call
| infix_expr
| prefix_expr
}

colon_typex = { ":" ~ typex }

def_func_args = { "::" ~ id_colon_typex+ }

def_func_block = _{ arrow_block | rust_block }

def_func_type = { colon_typex | (colon_typex? ~ def_func_args) }

def_func = { "func" ~ id_generic ~ def_func_type? ~ def_func_block }

return_stmt = { "return" ~ expr }

stmt = _{ def_func | return_stmt | expr }

indent = { " "* }

indented_stmt = { indent ~ stmt }

stmt_list = { indented_stmt+ }

arrow_block_start = { block_arrow ~ stmt_list }
arrow_block = { arrow_block_start ~ "--" }
