
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
int = @{ ASCII_DIGIT+ }
number = _{ float | int }

strchar = { !"\"" ~ !"$" ~ ANY }
strlit = @{ strchar+ }
strid = _{ "$" ~ id }
strx = _{ "${" ~ expr ~ "}" }
str = ${ "\"" ~ (strlit | strid | strx )* ~ "\"" }

negative = { "-" }
plus = { "+" }
dash = { "-" }
star = { "*" }
slash = { "/" }
tick = { "'" }
dot = { "." }
modulo = { "modulo" }
and = { "and" }
or = { "or" }
not = { "not" }
less_than = { "<" | "<=" }
equality = { "==" | "!=" }
greater_than = { ">" | ">=" }
add_newline = { as1 ~ "\\n" }
block_arrow = _{ "->" | ">>" }
double_dash = _{ "--" }

prefix_op = _{
    negative
    | not
}

postfix_op = _{
    (as1 ~ add_newline)
    | call_args
}

// keywords
func_mode = { "func" | "macro" }
rust_block = { "-RUST-" }
mxport = { "import" | "export" }

infix_op = _{
    dot
    | star | slash | modulo
    | plus
    | less_than | equality | greater_than
    | and | or
}

spaced_infix_op = _{
    (as1 ~ infix_op ~ as1)
    | (hs1 ~ dash ~ as1)
    | tick
}

keywords = _{
    func_mode
    | mxport
    | "datatype"
}

// horizontal space only
hs0 = _{ " "* }
hs1 = _{ " "+ }
// any horizontal or vertical space
as0 = _{ (" " | NEWLINE)* }
as1 = _{ (" " | NEWLINE)+ }
// vertical space required
vs1 = _{ NEWLINE ~ as0 }

modname_tail = _{ ASCII_ALPHA_LOWER | ASCII_DIGIT }
modname = @{ !keywords ~ ASCII_ALPHA_LOWER ~ modname_tail* }

id = @{ !keywords ~ (LETTER | "_") ~ ( LETTER | NUMBER | "_" )* }
def_id = { id ~ ("'" ~ id)* }

term = _{ id | number | str | ("(" ~ expr ~ ")") }

x_maybe_k = { (id ~ hs0 ~ ":" ~ as0)? ~ expr }
xlist = _{ x_maybe_k ~ (as0 ~ "," ~ as0 ~ x_maybe_k)* ~ as0 ~ ","? }
call_args = { "(" ~ as0 ~ xlist? ~ as0 ~ ")" }

prefix1 = _{ prefix_op ~ as0 ~ term }
postfix1 = _{ term ~ postfix_op }
x1 = _{
    prefix1
    | postfix1
    | term
}

expr = !{
    x1 ~ (spaced_infix_op ~ x1)+
    | x1
}

// types

list_type = { "[" ~ typex ~ "]" }
generic_type = { id ~ ("'" ~ type_term)+ }

type_term = _{
    "(" ~ typex ~ ")"
    | list_type
    | generic_type
    | id
}

type_func = {
    "::" ~ x_maybe_k*
    | type_term ~ "::" ~ x_maybe_k*
    | type_term ~ "::"
}

typex = { type_func | type_term }

// statements

def_func_arg = { (id ~ hs0 ~ ":" ~ hs0 ~ type_term) | type_term }
def_func_args = { (hs0 ~ "::" ~ (as0 ~ def_func_arg)+)? }
def_func_result = { (as0 ~ ":" ~ type_term)? }
def_func = !{
    func_mode ~ as1 ~ def_id ~ def_func_result ~ def_func_args ~ as1 ~ func_block
}

def_struct = !{ "datatype" ~ hs1 ~ def_id ~ def_func_args ~ as1 ~ "--" }

mxid = _{ "." ~ id }
mxhead = @{
    ("/" ~ modname)
    | ("../" ~ modname)
    | modname
}
mxmod = @{ mxhead ~ ("/" ~ modname)* ~ mxid? | mxid }
mxline = { mxmod ~ (hs1 ~ mxblock)? }
mxblock = !{ block_arrow ~ vs1 ~ (mxline ~ vs1)+ ~ "--" }
mxstmt = !{ mxport ~ hs1 ~ (mxline | star) }

stmt = _{
    def_func
    | def_struct
    | mxstmt
    | expr
}

line = _{ hs0 ~ stmt? }
stmt_block = ${ (line ~ vs1)* }
arrow_block = _{ block_arrow ~ stmt_block }
func_block = _{
    rust_block
    | (block_arrow ~ vs1 ~ stmt_block ~ double_dash)
    | (block_arrow ~ hs1 ~ expr ~ hs1 ~ double_dash)
}
file = ${ (line ~ "\n")* ~ line ~ "\n"? ~ EOI }
