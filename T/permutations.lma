## a leetcode problem #46
## https://leetcode.com/problems/permutations/

import list
import option


func permutations(items: [Int]): [[Int]]
>>
    let picks := pick_items([], [], [], items)
    let ppicks := list::map(picks, permute_picks)
    #>>
    let splits_a := list::map(splits, fn(s: (Int, Int)) >>
        match s
        |(a, b) >> a
        --
    #--
    print("perms for $items: $ppicks\n")
    []
--

func permute_picks(picks: (Int, [Int])): [[Int]] >>
    match picks
    |(pick, []) >> [[pick]]
    |(pick, rem) >>
        let prem := permutations(rem)
        ## print("perms of $rem: $prem\n")
        list::map(prem, fn(rem_items) >> pick;rem_items --)
    --
--

func pick_items: [(Int, [Int])]
.all: [(Int, [Int])]
.first: [Int]
.last: [Int]
.input: [Int]
>>
    match (first, last, input)
    |([], _, []) >> all
    |([some_first], _, []) >> (some_first, last);all
    |([], _, head;tail) >>
        let all2 := pick_items(all, [head], last, tail)
        pick_items(all2, [], head;last, tail)
    |([_], _, head;tail) >>
        pick_items(all, first, head;last, tail)
    --
--

func split_lists: [([Int], [Int])]
.all: [([Int], [Int])]
.acc: [Int]
.bcc: [Int]
.input: [Int]
>>
    match input
    |[] >> (acc, bcc);all
    |head;tail >>
        let all2 := split_lists(all, head;acc, bcc, tail)
        split_lists(all2, acc, head;bcc, tail)
    --
--

func main() >>
    let permuts := permutations([1, 2, 3])
    println("$permuts")
--
