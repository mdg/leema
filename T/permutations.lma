
import list
import option


func permutations(items: [Int]): [[Int]]
>>
    let picks := pick_items([], option::None, [], items)
    #>>
    let splits_a := list::map(splits, fn(s: (Int, Int)) >>
        match s
        |(a, b) >> a
        --
    #--
    print("picks: $picks\n")
    []
--

func pick_items: [(Int, [Int])]
.all: [(Int, [Int])]
.first: Int?
.last: [Int]
.input: [Int]
>>
    match (first, last, input)
    |(option::None, _, []) >> all
    |(option::Some(some_first), _, []) >> (some_first, last);all
    |([], _, head;tail) >>
        let all2 := pick_items(all, option::Some(head), last, tail)
        pick_items(all2, option::None, head;last, tail)
    |(option::Some(_), _, head;tail) >>
        pick_items(all, first, head;last, tail)
    --
--

func split_lists: [([Int], [Int])]
.all: [([Int], [Int])]
.acc: [Int]
.bcc: [Int]
.input: [Int]
>>
    match input
    |[] >> (acc, bcc);all
    |head;tail >>
        let all2 := split_lists(all, head;acc, bcc, tail)
        split_lists(all2, acc, head;bcc, tail)
    --
--

func main() >>
    let permuts := permutations([1, 2, 3])
    println("$permuts")
--
