
import json
import map
import option


struct User
.id: Int
.name: Str
--

#>>
func serialize[User](u: User, s: Serializer)
>>
    deser::serialize(s, u.id)
    deser::serialize(s, u.name)
--

func deserialize[User](d: Deserializer)
>>
    let id := deser::deserialize[Int](d)
    let name := deser::deserialize[Str](d)
    User(id, name)
#--

func user_from_json(juser: json::Val)
>>
    let fields := json::object_fields(juser)
    let id := json::int_val(option::unwrap(map::get(fields, "id")))
    let name := option::unwrap(map::get(fields, "name"))
    User(id, name)
--

func test_decode() >>
    let s := json::decode[Str]("\"coded  '\"")
    let i := json::decode[Int]("9")
    let b := json::decode[Bool]("true")
    println("$s $i or $b")
--

func test_decode_val() >>
    let ju := json::decode_val("{\"id\": 8, \"name\": \"Gerald\"}")
    let u := user_from_json(ju)
    println("$u")
--

func test_encode() >>
    println(json::encode(6))
    println(json::encode(false))
    print(json::encode("hello") \n)
    print(json::encode(#world) \n)
    print(json::encode(["a", "b"]) \n)
    let m := map::set({}, "x", 4)
    print(json::encode(m) \n)
    let u := User(4, "Javier")
    println(json::encode(u))
--

func main() >>
    test_encode()
    test_decode()
--
