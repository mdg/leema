
import list


struct Node(Int, [maxdepth::Node])

func count_depth(max_depth: Int, node: Node): Int ->
    match node
    |Node(val, []) ->
        max_depth
    |Node(val, children) ->
        let children_depth := list::map(children, count_depth(max_depth + 1, ?))
        list::reduce(0, children_depth, max)
    --
--

func make_data(): Node ->
    Node(1, [
        Node(2, [
            Node(5, []),
            Node(6, [
                Node(8, []),
            ]),
        ]),
        Node(3, []),
        Node(4, [
            Node(2, [
                Node(5, []),
                Node(6, [
                    Node(8, []),
                ]),
            ]),
            Node(5, []),
            Node(6, [
                Node(8, []),
            ]),
        ]),
    ])
--


func main() ->
    let d := make_data()
    print("data is $d\n")
    let depth := count_depth(1, d)
    print("depth is $depth\n")
--
