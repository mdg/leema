## https://leetcode.com/problems/diameter-of-binary-tree/description/

import list


struct Node(Int, [Node], [Node])

func get_diameter(root: Node): (Int, Int) ->
    match root
    |Node(_, [], []) ->
        (0, 0)
    |Node(_, [left], []) ->
        let (l_diameter, l_depth) := get_diameter(left)
        (l_diameter, l_depth + 1)
    |Node(_, [], [right]) ->
        let (r_diameter, r_depth) := get_diameter(right)
        (r_diameter, r_depth + 1)
    |Node(_, [left], [right]) ->
        let (l_diameter, l_depth) := get_diameter(left)
        let (r_diameter, r_depth) := get_diameter(right)
        let l_depth_2 := l_depth + 1
        let r_depth_2 := r_depth + 1
        let max_diameter_children := max(l_diameter, r_diameter)
        let max_diameter := l_depth_2 + r_depth_2
        (max(max_diameter, max_diameter_children), max(l_depth_2, r_depth_2))
    --
--

func make_data(): Node ->
    Node(1,
        [Node(2,
            [Node(4, [], [
                Node(8, [], [
                    Node(9, [], []),
                ]),
            ])],
            [Node(5, [], [
                Node(6, [], [
                    Node(7, [], []),
                ]),
            ])],
        )],
        [Node(3, [], [])],
    )
--


func main() ->
    let d := make_data()
    print("data is $d\n")
    let (max_path, _) := get_diameter(d)
    print("max_path is $max_path\n")
--
