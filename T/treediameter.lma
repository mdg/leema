
import list


struct Node(Int, [Node], [Node])

func get_diameter(root: Node, max_depth: Int): (Int, Int) ->
    match root
    |Node(_, [], []) ->
        (0, max_depth)
    |Node(_, [left], []) ->
        get_diameter(left, max_depth + 1)
    |Node(_, [], [right]) ->
        get_diameter(right, max_depth + 1)
    |Node(_, [left], [right]) ->
        let (l_diameter, l_depth) := get_diameter(left, max_depth + 1)
        let (r_diameter, r_depth) := get_diameter(right, max_depth + 1)
        let max_diameter_children := max(l_diameter, r_diameter)
        let max_diameter := l_depth + r_depth
        (max(max_diameter, max_diameter_children), max(l_depth, r_depth))
    --
--

func make_data(): Node ->
    Node(1,
        [Node(2,
            [Node(4, [], [])],
            [Node(5, [], [])],
        )],
        [Node(3, [], [])],
    )
--


func main() ->
    let d := make_data()
    print("data is $d\n")
    let (max_path, _) := get_diameter(d, 0)
    print("max_path is $max_path\n")
--
