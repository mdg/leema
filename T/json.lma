## Copyright 2022 Matthew Graham

import /list
import /map


datatype Val
|Integer :: Int
|String :: Str
|Boolean :: Bool
|Array :: [Val]
|Object :: <map.Map Str Val>
|Null
--

## impl JsonCoding with Tacos ::
##     func json_encode:Val :: self ->
##         Val/Obj.from [
##             qty: self.qty.json_encode(),
##             filling: self.filling.json_encode(),
##         ]
##     --
##
##     func json_decode:Self :: v:Val
##     |Val/Obj(items) ->
##         Tacos.new(
##             items.qty
##             items.filling
##         )
##     --
## --

## Convert an input value to a json-encoded string
func <encode T>:Str :: val:T ->
    let v := JsonCoding.encode(val)
    encode_val(v)
--

func <decode T>:T :: input:Str ->
    let v := decode_val(input)
    <JsonCoding.deode T>(v)
--

trait JsonCoding ::
    func encode:Val :: self --
    func decode:Self :: Val --
--



## impl JsonCoding with <Option T> ::
##     func encode:Val :: self
##     |Some(inner) -> JsonCoding.encode(inner)
##     |None -> Val.Null
##     --
##
##     func decode:<Option U> :: Val
##     |Val.Null -> None
##     |other -> Some(JsonCoding.decode(other))
##     --
## --

impl JsonCoding with Int ::
    func encode:Val :: self ->
        Val.Integer(self)
    --

    func decode:Self :: v:Val
    |Val/Integer(i) -> i
    --
--

## func <from_jsonval U>:<Option U> :: input:Val ->
##     match
##     |Val.Null -> None
##     |other -> Some(<from_jsonval T>(other))
##     --
## --

## func <from_jsonval [T]>:[T] :: input:Val ->
##     match
##     |Val.Array(items) ->
##         list.map(items, fn::i ->
##             <from_jsonval T>(i)
##         --)
##     |_ -> fail(#input_error, "json value is not a boolean $input")
##     --
## --


func obj_val:Val :: v:Val name:Str ->
    option.unwrap(map.get(object_fields(v), name))
--

func obj_int:Int :: v:Val name:Str ->
    int_val(object_val(v, name))
--

func obj_str:Str :: v:Val name:Str ->
    str_val(object_val(v, name))
--

func obj_bool:Bool :: v:Val name:Str ->
    bool_val(object_val(v, name))
--

func obj_fields:<map.Map Str Val> :: v: Val ->
    match v
    |Object(flds) >> flds
    |_ >> fail(#input_error, "json value is not an object: $v")
    --
--

func bool_val:Bool :: v:Val ->
    match v
    |Boolean(b) >> b
    |_ >> fail(#input_error, "json value is not a boolean: $v")
    --
--

func int_val:Int :: v:Val ->
    match v
    |Integer(i) >> i
    |_ >> fail(#input_error, "json value is not an integer: $v")
    --
--

func str_val:Str :: v:Val ->
    match v
    |String(s) >> s
    |_ >> fail(#input_error, "json value is not a string: $v")
    --
--

func encode_val:Str :: v:Val -RUST-
func decode_val:Val :: input:Str -RUST-

func <to_jsonval T>:Val :: input:T -RUST-
func <from_jsonval T>:T :: input:Val -RUST-

func <get_jsonobj_fields T>:<map.Map Str Val> :: input:T -RUST-
func <set_jsonobj_fields T>:T :: initial:T fields:<map.Map Str Val> -RUST-
