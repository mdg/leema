
import list
import map
import option


func encode[T](val: T): Str -RUST-
func decode[T](input: Str): T -RUST-

enum Val
|Integer(Int)
|String(Str)
|Boolean(Bool)
|Array([json::Val])
|Object(map::T[Str, json::Val])
|Null
--

func decode_val(input: Str): json::Val -RUST-

func object_fields(v: Val): map::T[Str, Val]
>>
    match v
    |Object(flds) >> flds
    |_ >> fail(#input_error, "json value is not an object: $v")
    --
--

func object_val(v: Val, name: Str): Val
>>
    option::unwrap(map::get(object_fields(v), name))
--

func object_int(v: Val, name: Str): Int
>>
    int_val(object_val(v, name))
--

func object_str(v: Val, name: Str): Str
>>
    str_val(object_val(v, name))
--

func object_bool(v: Val, name: Str): Bool
>>
    bool_val(object_val(v, name))
--

func array_map[T](v: Val, transform: F(Val): T): [T]
>>
    match v
    |Array(items) >> list::map(items, transform)
    |_ >> fail(#input_error, "json value is not an array: $v")
    --
--

func bool_val(v: Val): Bool
>>
    match v
    |Boolean(b) >> b
    |_ >> fail(#input_error, "json value is not a boolean: $v")
    --
--

func int_val(v: Val): Int
>>
    match v
    |Integer(i) >> i
    |_ >> fail(#input_error, "json value is not an integer: $v")
    --
--

func str_val(v: Val): Str
>>
    match v
    |String(s) >> s
    |_ >> fail(#input_error, "json value is not a string: $v")
    --
--
