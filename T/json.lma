## Copyright 2022 Matthew Graham

import /list
import /map


datatype Val
|Integer :: Int
|String :: Str
|Boolean :: Bool
|Array :: [Val]
|Object :: <map.Map Str Val>
|Null
--

func <encode T>:Str :: val:T ->
    let fields := *val
    list.reduce(map.new(), fields, fn::obj (k v) ->
        map.put(obj, k, v)
        obj(*k, to_jsonval(v))
    --)
--

func <decode T>:T :: input:Str ->
    let json_val := decode_val(input)
    <from_jsonval T>(val)
--


func <from_jsonval Int>:Int :: input:Val ->
    match
    |Integer(i) -> i
    |_ -> fail(#input_error, "json value is not an integer")
    --
--

func <from_jsonval Str>:Str :: input:Val ->
    match
    |String(s) -> s
    |_ -> fail(#input_error, "json value is not a string $input")
    --
--

func <from_jsonval Bool>:Bool :: input:Val ->
    match
    |Boolean(b) -> b
    |_ -> fail(#input_error, "json value is not a boolean $input")
    --
--

func <from_jsonval <Option T>>:<Option T> :: input:Val ->
    match
    |Val.Null(b) -> None
    |other -> Some(<from_jsonval T>(other))
    --
--

func <from_jsonval [T]>:[T] :: input:Val ->
    match
    |Val.Array(items) ->
        list.map(items, fn::i ->
            <from_jsonval T>(i)
        --)
    |_ -> fail(#input_error, "json value is not a boolean $input")
    --
--

func decode_val:Val :: input:Str -RUST-

func decode_obj:<map.Map Str Val> :: input:Str -RUST-

func decode_arr:[Val] :: input:Str -RUST-

func obj_val:Val :: v:Val name:Str ->
    option.unwrap(map.get(object_fields(v), name))
--

func obj_int:Int :: v:Val name:Str ->
    int_val(object_val(v, name))
--

func obj_str:Str :: v:Val name:Str ->
    str_val(object_val(v, name))
--

func obj_bool:Bool :: v:Val name:Str ->
    bool_val(object_val(v, name))
--

func obj_fields:<map.Map Str Val> :: v: Val ->
    match v
    |Object(flds) >> flds
    |_ >> fail(#input_error, "json value is not an object: $v")
    --
--

func bool_val:Bool :: v:Val ->
    match v
    |Boolean(b) >> b
    |_ >> fail(#input_error, "json value is not a boolean: $v")
    --
--

func int_val:Int :: v:Val ->
    match v
    |Integer(i) >> i
    |_ >> fail(#input_error, "json value is not an integer: $v")
    --
--

func str_val:Str :: v:Val ->
    match v
    |String(s) >> s
    |_ >> fail(#input_error, "json value is not a string: $v")
    --
--
