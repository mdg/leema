
import list

func count_most: (Int, [(Int, Int)])
.houses: [Int]
.house_count: Int
.rob_streak: Int
.subtotal: Int
.past_robbed: [(Int, Int)]
>>
    match (houses, rob_streak)
    |([], _) >> (subtotal, list::reverse(past_robbed))
    |(_;tail, 1) >>
        count_most(tail, house_count + 1, 0, subtotal, past_robbed)
    |(head;tail, 0) >>
        let nhouses2 := house_count + 1
        let past_if_rob := (house_count, head);past_robbed
        let subtotal_if_rob := subtotal + head
        let (rob_total, houses_rob) :=
            count_most(tail, nhouses2, 1, subtotal_if_rob, past_if_rob)
        let (skip_total, houses_skip) :=
            count_most(tail, nhouses2 + 1, 0, subtotal, past_robbed)
        if
        |skip_total < rob_total >> (rob_total, houses_rob)
        |else >> (skip_total, houses_skip)
        --
    --
--

func main() ->
    ## let d := [2,7,9,3,1]
    let d := [2,1,1,3]

    let (cash, houses) := count_most(d, 0, 0, 0, [])
    print("robbed \$$cash from houses: $houses\n")
--
