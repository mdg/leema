
func map[A, B](items: [A], f: F(A): B): [B] ->
    _map([], items, f)
--

func _map[C, D](result :[C], input: [D], f: F(D): C): [C] >>
|(result, [], _f) -> reverse(result)
|(result, h;t, f) -> _map(f(h);result, t, f)
--

func reduce[A, B](init: A, items: [B], f: F(A, B): A): A ->
    match items
    |[] -> init
    |head;tail ->
        let new_val := f(init, head)
        reduce(new_val, tail, f)
    --
--

func filter[H](items: [H], f: F(H): Bool): [H] ->
    _filter([], items, f)
--

func reverse[E](items: [E]): [E] ->
    _reverse([], items)
--

func sort[T](items: [T]): [T] -RUST-

func cat[T](a: [T], b: [T]): [T] -RUST-

func head[T](l: [T]): T >>
|h:_ >> h
|_ >> fail(#param_error, "cannot take head from empty list")
--

func _filter[T](acc: [T], in: [T], pred: F(T): Bool): [T] >>
|(acc, [], _) -> reverse(acc)
|(acc, h;t, f) ->
    let matcher := f(h)
    let new_acc :=
        match f(h)
        |true -> h;acc
        |false -> acc
        --
    _filter(new_acc, t, f)
--

func _reverse[T](out: [T], in: [T]): [T] >>
|(out, []) -> out
|(out, h;t) -> _reverse(h;out, t)
--
